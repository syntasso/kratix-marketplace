#!/usr/bin/env bash

set -eu
exec 3>&1 1>&2

ROOT="$( cd "$( dirname "${BASH_SOURCE[0]}" )/../.." && pwd )"

workflow=$(curl -sL https://circleci.com/api/v2/insights/gh%2Fsyntasso%2Fkratix-marketplace//workflows/promises | jq -r '[.items[] | select(.status == "success")][0] | .id')
pipeline=$(curl -sL https://circleci.com/api/v2/workflow/$workflow | jq -r '.pipeline_id')

export LAST_GREEN_SHA=$(curl -sL https://circleci.com/api/v2/pipeline/$pipeline | jq -r '.vcs.revision')
export UNTESTED_SHAS=$(git log --format=format:%H $LAST_GREEN_SHA~0..HEAD --full-diff)

promises() {
    local all_dirs=$(find $ROOT -maxdepth 2 -type d)

    declare -a arr
    for dir in $all_dirs; do
        if [ -f $dir/promise.yaml ]; then
            arr+=($dir)
        fi
    done
    echo "${arr[@]}"
}

untested_changes() {
    local dir=$1
    last_sha_for_dir=$(git log -1 --format=format:%H --full-diff $dir)
    [[ "$UNTESTED_SHAS" =~ "$last_sha_for_dir" ]]
}

pushd $ROOT
trap popd EXIT

template=/tmp/promise_to_test.yaml
cp ".circleci/scripts/promise_to_test_template.yaml" $template

target_config=.circleci/promises_to_test.yaml

test_all=false

for dir in ".circleci scripts"; do
    if untested_changes $dir; then
        echo "Changes in $dir detected, testing all promises"
        test_all=true
    fi
done

something_changed=false
for promise in $(promises); do
    if  $test_all || untested_changes $promise ; then
        something_changed=true
        name="${promise#"$ROOT/"}"
        if [ "${name:0:1}" = "." ]; then
            continue
        fi
        echo "Adding $name to test list"
        yq ".workflows.promises.jobs[0].test-and-push.matrix.parameters.promise_dir += [\"$name\"]" $template > $template.upd
        mv $template.upd $template
    fi
done

if ${something_changed} || ${FORCE_BUILD}; then
    echo "Something changed: ${something_changed}"
    echo "FORCE_BUILD: ${FORCE_BUILD}"
    cat ${template} >&3
else
    cat .circleci/scripts/empty.yaml >&3
fi
