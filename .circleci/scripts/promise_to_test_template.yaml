version: 2.1

orbs:
  k8s: circleci/kubernetes@1.3.1
  retry: kimh/run-with-retry@1.0.0
  slack: circleci/slack@3.4.2
  queue: eddiewebb/queue@3.1.4

executors:
  machine-medium:
    machine: true
    resource_class: medium
    working_directory: ~/repo
  machine-large:
    machine: true
    resource_class: large
    working_directory: ~/repo

commands:
  install_software:
    steps:
      - k8s/install
      - run:
          name: Install tools and deps
          command: |
            if [ ! -f ~/bin/kind ]; then
              curl -L https://github.com/kubernetes-sigs/kind/releases/download/v0.25.0/kind-linux-amd64 -o ~/bin/kind
              chmod +x ~/bin/kind
            fi

            curl -sLo ~/bin/worker-resource-builder.tar.gz https://github.com/syntasso/kratix/releases/download/v0.0.5/worker-resource-builder_0.0.5_linux_amd64.tar.gz
            tar -xvf ~/bin/worker-resource-builder.tar.gz -C ~/bin
            mv ~/bin/worker-resource-builder-v* ~/bin/worker-resource-builder
            chmod +x ~/bin/worker-resource-builder

      - run:
          name: Install Kratix
          command: |
            kind create cluster --name platform --image kindest/node:v1.31.2@sha256:18fbefc20a7113353c7b75b5c869d7145a6abd6269154825872dc59c1329912e

            kubectl apply --filename https://github.com/cert-manager/cert-manager/releases/download/v1.12.0/cert-manager.yaml
            kubectl wait --for condition=available -n cert-manager deployment/cert-manager --timeout 60s
            kubectl wait --for condition=available -n cert-manager deployment/cert-manager-cainjector --timeout 60s
            kubectl wait --for condition=available -n cert-manager deployment/cert-manager-webhook --timeout 60s


            curl -sL https://github.com/syntasso/kratix/releases/latest/download/install-all-in-one.yaml | sed "s_syntasso.docker.scarf.sh/syntasso_syntasso_g" | kubectl apply -f -
            sleep 5
            kubectl apply --filename https://github.com/syntasso/kratix/releases/latest/download/config-all-in-one.yaml

            kubectl wait --for condition=available -n kratix-platform-system deployment/kratix-platform-controller-manager --timeout 90s

            git clone https://github.com/syntasso/kratix /tmp/kratix
            pushd /tmp/kratix
            ./scripts/register-destination --name platform-cluster --context kind-platform --state-store default --with-label environment=platform
            popd

            sleep 5
      - attach_workspace:
          at: .

  notify-slack:
    description: Notify failures via Slack
    parameters:
      fail_only:
        type: boolean
        default: true
      only_for_branches:
        type: string
      success_message:
        type: string
        default: ":tada: A $CIRCLE_JOB job has succeeded!"
      failure_message:
        type: string
        default: ":red_circle: A $CIRCLE_JOB job has failed!"
      channel:
        type: string
        default: eng-alerts-ci
    steps:
      - slack/status:
          webhook: ${SLACK_ENG_ALERTS_CI}
          channel: << parameters.channel >>
          include_job_number_field: false
          include_project_field: false
          fail_only: << parameters.fail_only >>
          success_message: << parameters.success_message >>
          failure_message: << parameters.failure_message >>
          only_for_branches: << parameters.only_for_branches >>

jobs:
  test-and-push:
    parameters:
      promise_dir:
        type: string
    executor:
      name: machine-large
    steps:
      - queue/until_front_of_line: # ensure only one of those runs at a time
          max-wait-time: "15"
          my-pipeline: << pipeline.number >>
      - install_software
      - checkout
      - run:
          working_directory: ~/repo/<< parameters.promise_dir >>
          name: Validate no pending changes
          command: |
            if [ -f ./internal/scripts/inject-deps ]; then
              ./internal/scripts/inject-deps
            fi

            if ! git diff --exit-code .; then
              echo ""
              echo "Changes in the dependencies were detected"
              echo "Injection of dependencies via CI is not supported. Please commit and push them manually."
              exit 1
            fi
      - run:
          name: Install Promise
          working_directory: ~/repo/<< parameters.promise_dir >>
          command: |
            if test -f ./internal/scripts/pipeline-image; then
              ./internal/scripts/pipeline-image build load
            fi
            kubectl create --filename promise.yaml
      - retry/run-with-retry:
          command: << parameters.promise_dir >>/internal/scripts/test promise
          # 5 minutes total retry (6 sec * 100 times = 600 sec)
          sleep: 6
          retry-count: 100
      - run:
          name: Wait for CRDs
          working_directory: ~/repo/<< parameters.promise_dir >>
          no_output_timeout: 1m
          command: |
            if test -f "resource-request.yaml"; then
              crd=$(yq e 'select(.kind == "Promise") | .spec.api.metadata.name' promise.yaml)

              while ! kubectl get crd ${crd} 2>/dev/null; do
                sleep 1
              done

              kubectl wait crd/${crd} --for condition=established --timeout=60s
            fi
      - run:
          name: Apply resource-request
          working_directory: ~/repo/<< parameters.promise_dir >>
          command: |
            if test -f "resource-request.yaml"; then
              if test -f "internal/scripts/pre-test"; then
                ./internal/scripts/pre-test
              fi
              kubectl apply --filename resource-request.yaml
            fi
      - retry/run-with-retry:
          command: << parameters.promise_dir >>/internal/scripts/test resource-request
          # 5 minutes total retry (6 sec * 100 times = 600 sec)
          sleep: 10
          retry-count: 100
      - run:
          name: Delete resource request
          working_directory: ~/repo/<< parameters.promise_dir >>
          command: |
            if test -f "resource-request.yaml"; then
              kubectl delete --filename resource-request.yaml
            fi
      - retry/run-with-retry:
          command: |
            cd << parameters.promise_dir >>
            if test -f "internal/scripts/test-delete"; then
              ./internal/scripts/test-delete
            fi
          # 5 minutes total retry (6 sec * 100 times = 600 sec)
          sleep: 6
          retry-count: 100
      - when:
          condition:
            equal: [main, << pipeline.git.branch >>]
          steps:
            - run:
                name: GHCR Push
                working_directory: ~/repo/<< parameters.promise_dir >>
                command: |
                  if test -f ./internal/scripts/pipeline-image; then
                    echo "$GITHUB_PACKAGES_TOKEN" | docker login ghcr.io -u syntassodev --password-stdin
                    ./internal/scripts/pipeline-image push
                  fi
            - run:
                name: Verify package is public
                working_directory: ~/repo/<< parameters.promise_dir >>
                command: |
                  if test -f "internal/configure-pipeline/Dockerfile"; then
                    resource_image=$(yq 'select(document_index == 0) | .spec.workflows.resource.configure[0].spec.containers[0].image' promise.yaml | cut -d "/" -f 3,4 | cut -d ":" -f 1)
                    promise_image=$(yq 'select(document_index == 0) | .spec.workflows.promise.configure[0].spec.containers[0].image' promise.yaml | cut -d "/" -f 3,4 | cut -d ":" -f 1)

                    for image in $resource_image $promise_image; do
                      if [ "$image" != "null" ]; then

                        visibility=$(curl -sL \
                          -H "Accept: application/vnd.github+json"\
                          -H "Authorization: Bearer $GITHUB_PACKAGES_TOKEN" \
                          -H "X-GitHub-Api-Version: 2022-11-28" \
                          "https://api.github.com/orgs/syntasso/packages?package_type=container&per_page=150" |
                        jq -r ".[] | select(.name | contains (\"${image}\")) | .visibility")

                        test "${visibility}" = "public"
                      fi
                    done
                  fi
      - notify-slack:
          only_for_branches: "main"

workflows:
  promises:
    jobs:
      - test-and-push:
          context:
            - github-credentials
          matrix:
            parameters:
              promise_dir: []
