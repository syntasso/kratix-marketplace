#!/usr/bin/env sh

set -eux

# Read current values from the provided resource request
export name="$(yq eval '.metadata.name' /kratix/input/object.yaml)"
export size="$(yq eval '.spec.size' /kratix/input/object.yaml)"

export replicas=1

if [ $size = large ]; then
  replicas=3
fi

# Replace defaults with user provided values
cat /tmp/transfer/kafka-node-pool.yaml |  \
  yq eval '.spec.replicas = env(replicas)' | \
  yq eval '.metadata.name = env(name)' | \
  yq eval '.metadata.labels."strimzi.io/cluster" = env(name)' \
  > /kratix/output/kafka-node-pool.yaml

cat /tmp/transfer/kafka-instance.yaml |  \
  yq eval '.metadata.name = env(name)' - \
  > /kratix/output/kafka-instance.yaml

mkdir -p /kratix/output/backstage/
cat <<EOF > /kratix/output/backstage/component.yaml
apiVersion: backstage.io/v1alpha1
kind: Component
metadata:
  name: kafka-${name}
  title: "Kafka ${name}"
  description: Kafka created via the Promise
  annotations:
    backstage.io/kubernetes-label-selector: kafka=${name}
  links:
  - url: https://github.com/syntasso/kratix-marketplace
    title: Support
    icon: help
spec:
  type: service
  lifecycle: production
  owner: kratix-worker
  dependsOn:
    - component:default/kafka
  providesApis:
    - kafka-promise-api
EOF

echo """
- directory: backstage
  matchLabels:
    environment: backstage
""" >> /kratix/metadata/destination-selectors.yaml
